---
import { Image } from 'astro:assets'
import vollrathLogo from '../images/vollrath_logo.svg'

const currentPath = new URL(Astro.request.url).pathname.replace(/\/$/, '') || '/'

const navItems = [
	{ path: '/', label: 'Home', id: 'home-link' },
	{ path: '/about', label: 'About', id: 'about-link' },
	{ path: '/now', label: 'Now', id: 'now-link' },
	{ path: '/renders', label: 'Renders', id: 'renders-link' },
	{ path: '/blog', label: 'Blog', id: 'blog-link', additionalPaths: ['/posts'] }
]

function isPathActive(itemPath, additionalPaths = []) {
	return (
		currentPath === itemPath || additionalPaths.some((addPath) => currentPath.startsWith(addPath))
	)
}
---

<!-- mx-auto flex min-h-screen w-full max-w-1970 flex-col px-1 py-1 sm:px-4 sm:py-4 lg:px-4 -->
<nav
	class="nav-bar border-gradient flex items-center justify-between bg-white px-4 shadow-lg sm:rounded-lg sm:px-12 lg:col-span-3"
>
	<a href="/">
		<Image src={vollrathLogo} class="mr-2 h-auto w-10 py-2 sm:w-16 sm:py-3" alt="Vollrath Logo" />
	</a>

	<!-- Hamburger Icon -->
	<div class="flex cursor-pointer flex-col space-y-1 sm:space-y-2 lg:hidden" id="hamburger">
		<span class="block h-0.5 w-5 bg-dark-text sm:w-8"></span>
		<span class="block h-0.5 w-5 bg-dark-text sm:w-8"></span>
		<span class="block h-0.5 w-5 bg-dark-text sm:w-8"></span>
	</div>

	<div
		class="invisible z-30 flex select-none flex-col font-header text-xl md:flex-row lg:visible"
		id="nav-menu"
	>
		{
			navItems.map((item) => (
				<a
					href={item.path}
					class={`nav-item px-4 py-2 font-medium transition hover:text-dark-text ${isPathActive(item.path, item.additionalPaths) ? 'gradient-underline text-dark-text' : ' text-gray-400'}`}
					id={item.id}
				>
					{item.label}
				</a>
			))
		}
		<div id="nav-underline" class="nav-underline invisible lg:visible"></div>
	</div>
</nav>

<script is:inline>
	let lastUnderlinePosition = { left: 0, width: 0 }

	function saveUnderlinePosition() {
		const underline = document.querySelector('#nav-underline')
		if (underline) {
			const style = window.getComputedStyle(underline)
			lastUnderlinePosition.left = parseInt(style.left, 10)
			lastUnderlinePosition.width = parseInt(style.width, 10)
		}
	}

	function initMenu() {
		const hamburger = document.getElementById('hamburger')
		const navMenu = document.getElementById('nav-menu')

		if (hamburger && navMenu) {
			hamburger.addEventListener('click', () => {
				navMenu.classList.toggle('invisible')

				// Check if the menu is now visible
				if (!navMenu.classList.contains('invisible')) {
					// Disable scrolling
					document.body.style.overflow = 'hidden'
				} else {
					// Re-enable scrolling
					document.body.style.overflow = ''
				}
			})
		}
	}

	function updateUnderline() {
		const underline = document.querySelector('#nav-underline')
		const activeItem = document.querySelector('.nav-item.gradient-underline')

		if (!activeItem) {
			return
		}

		const navMenu = document.querySelector('#nav-menu')
		const activeItemRect = activeItem.getBoundingClientRect()
		const navMenuRect = navMenu.getBoundingClientRect()

		const newLeft = activeItemRect.left + 10 - navMenuRect.left
		const newWidth = activeItem.offsetWidth - 20

		const movingRight = newLeft > lastUnderlinePosition.left

		underline.style.left = `${movingRight ? lastUnderlinePosition.left : lastUnderlinePosition.left + lastUnderlinePosition.width - newWidth}px`
		underline.style.width = `${lastUnderlinePosition.width}px`

		requestAnimationFrame(() => {
			underline.style.left = `${newLeft}px`
			underline.style.width = `${newWidth}px`
		})
	}

	function initializeListeners() {
		const events = [
			{ target: document, type: 'astro:before-swap', handler: saveUnderlinePosition },
			{
				target: document,
				type: 'astro:after-swap',
				handler: () => {
					updateUnderline()
					initMenu()
				}
			},
			{
				target: document,
				type: 'DOMContentLoaded',
				handler: () => {
					initMenu()
					updateUnderline()
				}
			},
			{ target: window, type: 'resize', handler: updateUnderline }
		]

		events.forEach(({ target, type, handler }) => target.addEventListener(type, handler))
	}

	initializeListeners()
</script>
