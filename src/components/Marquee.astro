---
// Shuffle the array and ensure adjacent items are not both highlighted
function shuffleAndDistribute(words) {
	// Create a deep copy of the words array to avoid mutation
	const shuffledWords = words.slice() // or [...words]

	// Shuffling the array
	for (let i = shuffledWords.length - 1; i > 0; i--) {
		const j = Math.floor(Math.random() * (i + 1))
		;[shuffledWords[i], shuffledWords[j]] = [shuffledWords[j], shuffledWords[i]]
	}

	// Ensuring no adjacent highlighted items
	for (let i = 0; i < shuffledWords.length - 1; i++) {
		if (i % 2 === 0 && (i + 1) % 2 === 0) {
			let next = i + 2
			if (next < shuffledWords.length) {
				;[shuffledWords[i + 1], shuffledWords[next]] = [shuffledWords[next], shuffledWords[i + 1]]
			}
		}
	}
	return shuffledWords
}

const { words } = Astro.props
---

<section
	class="enable-animation long-transition font-header text-5xl uppercase text-gray-400 dark:text-white sm:text-8xl"
>
	{
		Array.from({ length: 5 }).map((_, index) => {
			const shuffledWords = shuffleAndDistribute([...words])
			return (
				<div class={`marquee ${index % 2 === 0 ? '' : 'marquee--reverse'}`}>
					<ul class="marquee__content">
						{shuffledWords.map((word, wordIndex) => (
							<li key={`${index}-${wordIndex}`} class={wordIndex % 2 === 0 ? 'text-orange' : ''}>
								{word}
							</li>
						))}
					</ul>
					<ul class="marquee__content">
						{shuffledWords.map((word, wordIndex) => (
							<li key={`${index}-${wordIndex}`} class={wordIndex % 2 === 0 ? 'text-dark-text' : ''}>
								{word}
							</li>
						))}
					</ul>
				</div>
			)
		})
	}
</section>
